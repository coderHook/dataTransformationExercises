{"evaluator":"STUDENT_LOCAL_JEST_RUN","day":"data-transformations@1.0.0","context":"(unknown)","input":"(unknown)","gitName":"coderhook","gitEmail":"abel1987@hotmail.es","evaluation":[{"exercise":"Array methods: map, filter & find: ","attempted":true,"passed":true,"key":"[A] getPokeNames: Transforms an array of pokemons into an array of pokemon names","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter & find: "]}},{"exercise":"Array methods: map, filter & find: ","attempted":true,"passed":false,"key":"[B] getPokemonById: Gets a pokemon object by their id","failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).toEqual(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"height\": Any<String>, \"id\": Any<Number>, \"name\": Any<String>}\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/home/coderhook/1 - Programing/0-codaisseur/Project/testing project/dataTransFormationExercises/1.map-filter-find.test.js:16:25)\n    at Object.asyncJestTest (/home/coderhook/1 - Programing/0-codaisseur/Project/testing project/dataTransFormationExercises/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /home/coderhook/1 - Programing/0-codaisseur/Project/testing project/dataTransFormationExercises/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/home/coderhook/1 - Programing/0-codaisseur/Project/testing project/dataTransFormationExercises/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /home/coderhook/1 - Programing/0-codaisseur/Project/testing project/dataTransFormationExercises/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:89:5)"],"meta":{"learning_goals":["Array methods: map, filter & find: "]}},{"exercise":"Array methods: map, filter & find: ","attempted":false,"passed":false,"key":"[C] getRarePokemons: Transforms an array of pokemon into an array of \"rare\" (spawn_chance is less than 0.1) pokemon","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter & find: "]}},{"exercise":"Array methods: map, filter & find: ","attempted":false,"passed":false,"key":"[D] getMidSizedPokemon: Gets the pokemon that weighs \"38.0 kg\"","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter & find: "]}},{"exercise":"Array methods: map, filter & find: ","attempted":false,"passed":false,"key":"[E] getAdultPokemons: Transforms an array of pokemon into an array of pokemon who cannot be found in eggs","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter & find: "]}},{"exercise":"Array methods: map, filter & find: ","attempted":false,"passed":false,"key":"[F] getPokemonImages: Transforms an array of pokemon into an array of imageUrls","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter & find: "]}},{"exercise":"Array methods: reduce:","attempted":false,"passed":false,"key":"[G] calculateTotalPokemonWeight: calculates the combined weight of all 151 pokemon","failureMessages":[],"meta":{"learning_goals":["Array methods: reduce:"]}},{"exercise":"Array methods: reduce:","attempted":false,"passed":false,"key":"[H] calculateAverageSpawnChance: calculates the average spawn_chance of a pokemon","failureMessages":[],"meta":{"learning_goals":["Array methods: reduce:"]}},{"exercise":"Array methods: reduce:","attempted":false,"passed":false,"key":"[I] calculateTotalEggDistance: calculates how for you have to walk to hatch one of each pokemon egg","failureMessages":[],"meta":{"learning_goals":["Array methods: reduce:"]}},{"exercise":"Array methods: reduce:","attempted":false,"passed":false,"key":"[J] getHeaviestPokemon: returns the heaviest pokemon from an array of pokemons","failureMessages":[],"meta":{"learning_goals":["Array methods: reduce:"]}},{"exercise":"Array methods: reduce:","attempted":false,"passed":false,"key":"[K] catergorizePokemonsByRarity: catgorizes an array of pokemons based on spawn_chance","failureMessages":[],"meta":{"learning_goals":["Array methods: reduce:"]}},{"exercise":"Array methods: map, filter, find & reduce: ","attempted":false,"passed":false,"key":"[L] getGymleader: gets the gymleader belonging to a gym","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter, find & reduce: "]}},{"exercise":"Array methods: map, filter, find & reduce: ","attempted":false,"passed":false,"key":"[M] getTrainerPokemons: gets the pokemons belonging to a trainer","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter, find & reduce: "]}},{"exercise":"Array methods: map, filter, find & reduce: ","attempted":false,"passed":false,"key":"[N] getTrainersPokemons: replaces trainerIds with \n            the pokemons belonging to a trainer for an array of trainers","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter, find & reduce: "]}},{"exercise":"Array methods: map, filter, find & reduce: ","attempted":false,"passed":false,"key":"[O] getBigGyms: gets the city names with gym leaders who have 4 pokemons or more","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter, find & reduce: "]}},{"exercise":"Array methods: map, filter, find & reduce: ","attempted":false,"passed":false,"key":"[P] getRarestGym: gets the gym with the most legendary pokemon","failureMessages":[],"meta":{"learning_goals":["Array methods: map, filter, find & reduce: "]}}]}